
## Как работает веб-приложение

Веб-приложение - это программное обеспечение, которое работает на веб-сервере. В отличии от компьютерных программ, которые запускаются локально в ОС устройства, веб-приложения используют мощности другого оборудования. Н-р Excel компьютерная программа, а поисковик Яндекс - веб-приложение. 

Доступ к в-п осуществляется юзером через браузер с помощью интернета. Браузер отправляет запросы на сервер, получает и обрабатывает ответ. Результат отображается на странице в-п. 

В-п основано на клиент-серверной архитектуре. Значит, принцип работы в-п - запрос - ответ. Как на клиенте, так и на сервере находятся программы. Их на клиенте называют фронтендом ,а программы на сервере - бэкендом. Т.ж на стороне сервера находится база данных. 

Проще, *фронтенд* - это все, что видит юзер, открывая страницу в-п, и с чем он взаимодействует. В своей работе фронтенд-разработчики используют:

HTML -«скелет» страницы: структура, данные для браузера; 
CSS - «стиль» страницы: цвета, шрифты и ее внутреннее наполнение;
JavaScript - логика страницы: слайдеры, калькуляторы, анимации;
Фреймворк - инструмент, упрощающий разработку.  Например React. 

Бэкенд - это то, что скрыто от глаз юзера и просиходит вне его браузера. В это же время база данных хранит данные каждого конкретного юзера. Бэкенд-разработчики используют:

Язык программирования в зависимости от задачи: от С++ до Ruby. 
SQL - язык запросов в базы данных, и саму систему усправления базами данных (СУБД)
Как и фронтенд-разрабы - фреймворки. 

Н-р заходим в Uber, чтобы заказать такси. Взаимодействие фронтенда и бэкенда выглядит так:

совершаем заказ, заполняя все поля и нажимая кнопку «Заказть»;
фронтенд оформляет нашу пользовательскую информацию;
браузер отправляет инфу на сервер;
бэкенд обращается в базу данных за нужной ему инфой;
бэкенд обрабатывает полученнную инфу заказа;
бэкенд оформляет обработанную инфу в ответ;
сервер отправляет ответ в браузер;
фронтенд обрабатывает инфу;
мы получаем инфу вида «Водитель нацден. Будет через 5 минут». 


Пользователи общаются с приложениями через экран своего гаджета т.е интерфейс. А чтбы сделать запрос к бэкенду, фронтенд обращается к API бэкенда. 
API - это интерфейс, с помощью которого одна программа общается и обменивается данными с другой. 
Данные запроса и ответа API передается в определенном формате, через протокол HTTP. Формата два - JSON и XML. Посмотрим структуру каждого:

ХML:

<?xml version="1.0"
encoding="UTF-g"
?>
<root»
<id>1</id›
‹firstName></firstName>
‹snd></secondName>
<middleName/>
<phone›89999999999</phone>
<mail›example@mail.ru</mail›
</root>

JSON:

{
"id": 1,
"firstName":
"MBAH
"secondName"
"middleName"
: null,
"phone"
"8999999999"
"mail":
"example@mail.ru
}

Каждый формат работает по одному принципу «ключ-значение», где поле «ключ» - это имя параметра, а поле «значение» хранит оппеделенные данные

Существуют разные типы данных, которые принимает поле «значение». 

строковый тип данных *(в JSON к нему отсятся все данные, закрытые в кавычки)
числовой тип данных
булевый тип данных
пустое значение

и в XML и в JSON «user» можно считать за объект, к которому относятся вложенные данные. 
Т.ж в JSON есть особенный тип данных, который можно использовать как список данных - это массив. Массив определяется квадратными скобками. В массив можно указать неск значений. 
В XML нет массива, поэтому будет дублирование поля «ключ»
Помимо массива, есть еще и другая структура данных - словарь. Словарь как массив но немного сложнее. Он содержит не только значение но и ключ. 

# HTTP

Это протокол приеладного уровня, изначально предназначенный для передачи HTML-докумментов. HTML - это основа каждого сайта и приложения. Сейчас по HTTP передаются и другие данные: мемы или видео. 
HTTP состоит из стартовой строки, заголовков, пустой строки и тела сообщения. 

В стартовую строку запроса указывают URL-адрес и метод протокола:
http://www.kvch.com:80/path/to/file.html?key1=value1&value2#SomethingInPage

www.kvch.com - доменное имя
80 - порт, отображает технический параметр, используемый для доступа к ресурсам на сервере. Обычно подразумевается, что веб-сервер использует стандартные порты 80, 443. 
/path/to/file.html - путь, это тоже адрес, но в рамках веб-приложения. Например раздел сайта. 
?key1=value1&value2 - параметры - это дополнительные данные, которые браузер отправляет серверу. Параметры имеют формат «ключ-значение» и разделяются между собой знаком &. Каждый сервер имеет свои правила обработки этих параметров. 
#SomethingInPage - якорь - это тоже адрес, но в рамках параметра. Н-р сссылка на заголовок. 

К основным методам запроса относятся:
GET - получение. Н-р при открытии страницы Вконтакте. 
POST - создание. Н-р при создании нового аккаунта. 
PUT - обновление. Н-р при редактировании профиля. 
DELETE - удаление. Н-р при удалении аккаунта. 

Есть 5 типов статусов ответов:
1ХХ - дают информацию о процессе передачи. Н-р мы отправляем связанные между собой запросы. Данный код сообщает, что сервер вошел в режим хатико. 
2ХХ - дают информацию об успешной передаче. Появляется, когда все работает корректно. 
3ХХ - инфа о перенаправлении запроса. Т.ж называют редиректом. Исп-ся чтобы перенаправить пользователя с одной страницы на другую. 
4ХХ - инфа об ошибке на стороне клиента. 
5ХХ - инфа об ошибке на стороне сервера. Н-р, если сервер приложения отключили от питания. В заголовок HTTP-протокола указывают служебную информацию запроса. Н-р инфа о нашем браузере и о пользователе. 

Между заголовками и телом ставятся пустаая строка, чтобы браузер смог отличать блоки. А в тело запроса указываем данные переданные серверу, а в тело ответа данные которые отправляет нам сервер. 
Важно помнить, что HTTP предает данные в открытом виде. Поэтому придумали расширение HTTP(S), позволяющее шифровать отправленные и полученные данные. 
