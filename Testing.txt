					Testing theory

## Quality assurance, Quality control и Testing. Who is who?

1. **Testing** - самый первый уровень. Это проверка программного продукта на соответствие требованиям этого продукта. То есть когда ожидаемый и фактический результат совпадают, и это тот минимум, без которого нельзя выпускать продукт.
2**2. QC (Quality Control, контроль качества)** - второй уровень, включает в себя тестирование и контроль за соответствием заранее согласованному уровню качества и готовность к выпуску продукта в прод.
1. **QA (Quality Assurance, обеспечение качества)** - часть обеспечения согласованного уровня качества. Сюда может входить тестирование документации, ревью кода на соответствие стандартам, внедрение каких-то методик по работе с качеством. 
Для полного понимания обращаемся к [ГОСТ Р ИСО 9000-2015](https://sudact.ru/law/gost-r-iso-9000-2015-natsionalnyi-standart-rossiiskoi/gost-r-iso-9000-2015/%23:~:text=%D0%93%D0%9E%D0%A1%D0%A2%20%D0%A0%20%D0%98%D0%A1%D0%9E%209000-2015.%20%D0%9D%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9,%28IDT%29%20%D0%94%D0%B0%D1%82%D0%B0%20%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D1%8F%20-%202015-11-01)

**ПРИНЦИПЫ ТЕСТИРОВАНИЯ:**
  -Тестирование не может доказать отсутствие багов(только их наличие);
 - Исчерпывающее тестирование невозможно по определению;
 - Раннее тестирование позволяет сэкономить ресурсы;
 - Парадокс пестицидов;
 - Кластеризация багов;
 - Тестирование зависит от контекста;
 - Заблуждение об отсутствии багов;



## SDLC, Waterfall, Agile и CI/CD. Who is who?
 
**Жизненный цикл ПО (SLDC)** - это период времени, который начинается с возникновения идеи продукта до прекращения его использования - вывода из эксплуатации. 

Он состоит из последовательных этапов: 
-Анализ требований. На этом этапе составляется ТЗ(Техническое задание – это документ, содержащий информацию для постановки задач на разработку), обозначаются сроки по каждой задаче и план работ. Здесь также нужно учитывать все возможные риски. Как только все детали просчитаны и описаны  можно переходить к следующему этапу;
 - Дизайн системы. Разрабатывается прототип, дизайн-макет, платформа для программирования. Все члены команды должны быть расписаны по ролям, а также необходимо указать их обязанности;
 - Разработка. Команда пишет код продукта, согласно требованиям технического задания;
 - Тестирование. Проверка продукта, когда код написан. Если все благополучно, работу можно считать практически законченной;
 - Техническая поддержка. После релиза продукта, команда разработки поддерживает работу проекта на стабильном уровне, собирая обратную связь от пользователей и устраняя баги, если они возникают.


![image.png](5c0f61a0-839d-4b57-bcda-9ce4076d6a85.png)

Правильный порядок этапов жизненного цикла ПО:
Анализ требований
Проектирование
Разработка 
Тестирование
Техническая поддержка

**Waterfall** - водопадная/каскадная модель разработки, дублирует этапы жц ПО и позволяет решать задачи последовательно без возврата на пред. этапы

Принципы Waterfall:
 - Следуйте правилам;
 - Нет ТЗ — нет продукта; 
 - Чем подробнее ТЗ, тем лучше продукт; 
 - Следите, чтобы не было изменений

По мере развития и распространения ПО, нужно было максимально погружаться в проект, чтобы контролировать изменения, взаимодействовать с командой, предлагать новые решения. В рамках Waterfall это было невозможно, так как водопадная модель разработки не была гибкой. Именно в этот момент и появился Agile.

**Agile** - это группа методик для гибкого управления продуктом. Суть - проект разбивается на временные промежутки - спринты. Во время каждого спринта команда разработки создает часть продукта, которую можно потестить. Такой подход позволяет вносить правки на любом этапе. 
В Agile работа строится по логике:
 - составление ТЗ; 
 - проектирование; 
 - разработка; 
 - тестирование;
 - результат.

Манифест гибкой разработки ПО: 
 - Люди важнее инструментов. 
 - Качество продукта важнее документации. 
 - Взаимодействие с заказчиком важнее контракта. 
 - Готовность к изменениям важнее установленного плана.

В разработке любого софта есть два подхода: итеративный и непрерывный.

В итеративном пользователи видят продукт только в конце этапа, а до этого пользуются старой версией. 

Непрерывный позволяет каждый день получать новую версию, которую уже можно использовать. Он самый популярный (концепция CI/CD - Continuous Integration/Continuous Delivery - непрерывная интеграция и доставка). Это автоматизация тестирования и доставки новых модулей ПО пользователям. CI/CD относится к Agile-методологиям. 
CI/CD чаще всего зависит от тестировщиков и девопсов:
  - Тестировщики следят за тем, что новые изменения не повлияли на качество продукта; 
 - Девопсы автоматизируют процесс доставки ПО. 
  Благодаря CI/CD пользователи получают новые фичи сразу, а команда разработки получает страховку от возможных сбоев при сборке ПО.


