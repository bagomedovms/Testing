					Testing theory

## Quality assurance, Quality control и Testing. Who is who?

1. **Testing** - самый первый уровень. Это проверка программного продукта на соответствие требованиям этого продукта. То есть когда ожидаемый и фактический результат совпадают, и это тот минимум, без которого нельзя выпускать продукт.
2**2. QC (Quality Control, контроль качества)** - второй уровень, включает в себя тестирование и контроль за соответствием заранее согласованному уровню качества и готовность к выпуску продукта в прод.
1. **QA (Quality Assurance, обеспечение качества)** - часть обеспечения согласованного уровня качества. Сюда может входить тестирование документации, ревью кода на соответствие стандартам, внедрение каких-то методик по работе с качеством. 
Для полного понимания обращаемся к [ГОСТ Р ИСО 9000-2015](https://sudact.ru/law/gost-r-iso-9000-2015-natsionalnyi-standart-rossiiskoi/gost-r-iso-9000-2015/%23:~:text=%D0%93%D0%9E%D0%A1%D0%A2%20%D0%A0%20%D0%98%D0%A1%D0%9E%209000-2015.%20%D0%9D%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9,%28IDT%29%20%D0%94%D0%B0%D1%82%D0%B0%20%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D1%8F%20-%202015-11-01)

**ПРИНЦИПЫ ТЕСТИРОВАНИЯ:**
  -Тестирование не может доказать отсутствие багов(только их наличие);
 - Исчерпывающее тестирование невозможно по определению;
 - Раннее тестирование позволяет сэкономить ресурсы;
 - Парадокс пестицидов;
 - Кластеризация багов;
 - Тестирование зависит от контекста;
 - Заблуждение об отсутствии багов;



## SDLC, Waterfall, Agile и CI/CD. Who is who?
 
**Жизненный цикл ПО (SLDC)** - это период времени, который начинается с возникновения идеи продукта до прекращения его использования - вывода из эксплуатации. 

Он состоит из последовательных этапов: 
-Анализ требований. На этом этапе составляется ТЗ(Техническое задание – это документ, содержащий информацию для постановки задач на разработку), обозначаются сроки по каждой задаче и план работ. Здесь также нужно учитывать все возможные риски. Как только все детали просчитаны и описаны  можно переходить к следующему этапу;
 - Дизайн системы. Разрабатывается прототип, дизайн-макет, платформа для программирования. Все члены команды должны быть расписаны по ролям, а также необходимо указать их обязанности;
 - Разработка. Команда пишет код продукта, согласно требованиям технического задания;
 - Тестирование. Проверка продукта, когда код написан. Если все благополучно, работу можно считать практически законченной;
 - Техническая поддержка. После релиза продукта, команда разработки поддерживает работу проекта на стабильном уровне, собирая обратную связь от пользователей и устраняя баги, если они возникают.


![image.png](5c0f61a0-839d-4b57-bcda-9ce4076d6a85.png)

Правильный порядок этапов жизненного цикла ПО:
Анализ требований
Проектирование
Разработка 
Тестирование
Техническая поддержка

**Waterfall** - водопадная/каскадная модель разработки, дублирует этапы жц ПО и позволяет решать задачи последовательно без возврата на пред. этапы

Принципы Waterfall:
 - Следуйте правилам;
 - Нет ТЗ — нет продукта; 
 - Чем подробнее ТЗ, тем лучше продукт; 
 - Следите, чтобы не было изменений

По мере развития и распространения ПО, нужно было максимально погружаться в проект, чтобы контролировать изменения, взаимодействовать с командой, предлагать новые решения. В рамках Waterfall это было невозможно, так как водопадная модель разработки не была гибкой. Именно в этот момент и появился Agile.

**Agile** - это группа методик для гибкого управления продуктом. Суть - проект разбивается на временные промежутки - спринты. Во время каждого спринта команда разработки создает часть продукта, которую можно потестить. Такой подход позволяет вносить правки на любом этапе. 
В Agile работа строится по логике:
 - составление ТЗ; 
 - проектирование; 
 - разработка; 
 - тестирование;
 - результат.

Манифест гибкой разработки ПО: 
 - Люди важнее инструментов. 
 - Качество продукта важнее документации. 
 - Взаимодействие с заказчиком важнее контракта. 
 - Готовность к изменениям важнее установленного плана.

В разработке любого софта есть два подхода: итеративный и непрерывный.

В итеративном пользователи видят продукт только в конце этапа, а до этого пользуются старой версией. 

Непрерывный позволяет каждый день получать новую версию, которую уже можно использовать. Он самый популярный (концепция CI/CD - Continuous Integration/Continuous Delivery - непрерывная интеграция и доставка). Это автоматизация тестирования и доставки новых модулей ПО пользователям. CI/CD относится к Agile-методологиям. 
CI/CD чаще всего зависит от тестировщиков и девопсов:
  - Тестировщики следят за тем, что новые изменения не повлияли на качество продукта; 
 - Девопсы автоматизируют процесс доставки ПО. 
  Благодаря CI/CD пользователи получают новые фичи сразу, а команда разработки получает страховку от возможных сбоев при сборке ПО.

> **ISTQB - **Совет по сертификации тестирования программного обеспечения, действующий на международном уровне.

**Метод черного ящика (black box)**
Тестирование черного ящика ( отсутствие доступа к коду ) или тестирование поведения — техника, основанная на работе исключительно с внешними интерфейсами системы.

**Метод белого ящика (white box)**
 Тестирование белого ящика ( полный доступ к коду / сам писал код ) — метод тестирования ПО, который предполагает, что внутренняя структура/устройство/реализация системы известны тестировщику.
**Пример** : двигатель автомобиля. Для водителя (особенно начинающего) двигатель автомобиля - черный ящик. Но, для механика нет. Он, словно программист, понимает логику работы компонентов двигателя и знает его слабые места.

**Метод серого ящика (grey box)**
 Тестирование серого ящика ( частичный доступ к коду ) — метод тестирования ПО, который предполагает комбинацию White Box и Black Box подходов. То есть, внутреннее устройство программы нам известно лишь частично.
**Преимущества:**
  - Тестирование серого ящика включает в себя плюсы тестирования «черного» и «белого». Другими словами, тестировщик смотрит на объект тестирования с позиции «черного» ящика, но при этом проводит анализ на основе тех данных, что он знает о системе;
 - Тестировщик может проектировать и использовать более сложные сценарии тестирования;
 - Предоставляет разработчику достаточно времени для исправления дефектов.
  **Недостатки:**
  - Возможность анализа кода и тестового покрытия ограничена, так как доступ к исходному коду ограничен.
 - Тесты могут быть избыточными в том случае, когда разработчик также проверяет свой код Unit-тестами.
  **Пример:** разработчик, проверяющий программу, методом черного ящика ИЛИ тестировщик, ознакомившийся с архитектурой программы, проверяющий программу, методом черного ящика. Оба понимают логику работы программы, но проверяют ее, с точки зрения пользователя. 

**ISTQB ** относит тестирование методами белого и черного ящика к методам проектирования тестов. Поэтому, ни о каком «среднем» или «промежуточном» методе в этом случае конечно и речи быть не может. Мы либо разрабатываем тесты, зная код, либо не зная его. То есть в классификации  **ISTQB ** такого вида тестирования не существует.

Выделяют четыре уровня тестирования:
  - Модульное тестирование (Component/Unit testing);
 - Интеграционное тестирование (Integration testing);
 - Системное тестирование (System testing);
 - Приемочное тестирование (Acceptance testing).

  Задачи любого уровня тестирования:
  - Снижение риска;
 - Обнаружение дефектов;
 - Предотвращение перехода дефектов на более высокие уровни.

**Модульное тестирование**
 Для обозначения модульного тестирования используется множество синонимичных названий: модульное, юнит или компонентное.
 Модульное тестирование проводится, вызывая код. Производится, как правило, разработчиками. 

**Интеграционное тестирование**
Это тестирование взаимодействия модулей системы или нескольких систем.
Так как разные модули приложения могут разрабатываться разными программистами - необходимо проверить взаимодействие между ними.
Например, со страницы корзины при нажатии кнопки «Оплатить» происходит переход на страницу платежной системы и осуществляется оплата.
Типичные дефекты: 
-Отсутствие или неправильные данные;
-Сбои связи между компонентами;
-Нарушение обязательных правил безопасности. 

**Системное тестирование**
Производится после окончания интеграционного. Сначала разработчики создают и тестируют модули, затем интегрируют и тестируют модули между собой. В результате получается некая завершенная система, базовая модель приложения. Цель системного тестирования: проверить все приложение целиком.
 
На системном уровне тестирования проводится тестирование полного пути (end-to-end/E2E flow) использования продукта. Под путем использования понимается вся цепочка взаимодействия от запуска приложения до какого-то конечного результата.
 Пример сценария end-to-end для интернет магазина:
  - Незарегистрированный пользователь переходит на сайт интернет магазина;
 - Регистрируется на сайте;
 - Авторизуется на сайте;
 - Находит необходимый товар;
 - Добавляет его в корзину;
 - Статус заказа «Ожидает оплаты»;
 - Оплачивает заказ;
 - Деньги поступают на счет компании;
 - Статус заказа меняется на «Оплачен»;
 - После получения заказа пользователем статус заказа меняется на «Получен».
  Типичные дефекты:
  - Неожиданное или неверное поведение системы;
 - Система неспособна выполнять end-to-end задачи;
 - Система неспособна правильно работать в различных средах;
 - Система работает не в соответствии с пользовательским руководством.

Приемочное тестирование включает в себя формы:
-Пользовательское приемочное тестирование (User acceptance testing) - производится пользователями конечного продукта. 
-Операционные приемочные испытания (Operational acceptance testing) - проводят сис админы. Проверяется функции резервного копирования, установка/ удаление/ обновление системы, проверка безопасности и производительности приложения. Необходимо удостовериться, что приложение возможно обслуживать и сопровождать на требуемом уровне даже в экстремальных условиях
-Контрактные и нормативные приемочные испытания (Contractual and regulatory acceptance testing) - Проверка что приложение соблюдает все нормативные требования, продукт не нарушает чью-то интеллектуальную собственность или не использует нелицензионный софт. 
 -Альфа и бета-тестирование (Alpha and beta testing ).

*Альфа тестирование*  включает имитацию реального использования продукта штатными  или сторонними разработчиками, либо командой тестировщиков.
 *Бета-тестирование*  —  производится реальными пользователями, с целью получения от них обратной связи и выявления максимального числа ошибок для их последующего устранения перед окончательным выходом продукта на рынок (релизом).

Подходы к тестированию по степени формализации:
**Тестирование на основе тест-кейсов**: Тест-кейс — это совокупность входных данных, условий выполнения и ожидаемого результата, необходимых для проверки реализации функционала тестируемого программного обеспечения (ПО) или какого-то его свойства.

**Исследовательское тестирование**(Exploratory testing) - тест-кейсы не создаются заранее, а тестер проверяет на лету. 
Исследовательское тестирование ориентировано больше на тестирование как на мыслительную деятельность, а не как на бездумное воспроизведение по заранее написанному сценарию. При тестировании по сценарию ты сначала разрабатываешь тестовые случаи, а затем исполняешь их. Исследовательское тестирование — это одновременный процесс разработки и выполнения тестов. Вместо сценариев - чек-листы. 

**Свободное (интуитивное) тестирование**(Ad Hoc Testing или Monkey testing) - полностью формализованный подход, в котором не исп. ни тест-кейсы, ни сценарии, ни чек-листы. Полностью на интуиции и спонтанных действиях которые предположительно могут вызвать ошибку. Такое тестирование не требует никакой документации, планирования, наличия процессов, которых следует придерживаться при выполнении тестирования. 
Делится на 2 вида:
*buddy testing (совместное тестирование)* — когда 2 человека, как правило разработчик + тестировщик, работают параллельно и находят дефекты в одном и том же модуле. Такой вид тестирования помогает тестировщику выполнять необходимые проверки, а программисту фиксить баги на ранних этапах.

 *pair testing (парное тестирование)* —  когда 2 тестировщика проверяют один модуль и помогают друг другу. К примеру, один может искать дефекты, а второй —  их документировать.

					Виды тестирования:

-**Статическое тестирование (Static Testing)** — тип тестирования, при котором код программы не исполняется во время проведения тестов.
**-Динамическое  тестирование (Dynamic Testing)** - когда тесты проводятся на работающем приложении. 

По степени автоматизации тестирование делится на Ручное и Автоматизированное.
 - При **Ручном тестировании (Manual Testing) **тестировщик выполняет тесты, не используя каких-либо средств автоматизации;

 - **Автоматизированное тестирование (Automation Testing)**предполагает использование специального программного обеспечения (помимо тестируемого) для контроля выполнения тестов и сравнения ожидаемого фактического результата работы программы.

**Функциональное тестирование(Functional Testing)** - это то, «что» должна делать система. Включает в себя тесты, оценивающие функции приложения. 
Сюда входят: модульное, интеграционное, системное и приемочное тестирование. Кроме того, регрессионное и дымовое тестирования тоже являются подвидами функционального. Исполняется функциональное тестирование на основании требований в виде спецификаций или пользовательских историй.

**Нефункциональное тестирование(Non-functional Testing)** - оценивает хар-ки систем и ПО (надежность, производительность, удобство, эффективность, безопасность). Нефункциональное т-е - это проверка того, насколько хорошо ведет себя система. 

***Виды функционального т-я (по хронологии):***

*Дымовое т-е*(Smoke Testing) - минимальный набор тестов на самые очевидные ошибки. Проверяет работоспособность критически важных функциональных частей приложения. Например регистрация нового юзера, создание нового заказа, выставление счета клиенту, получение оплаты. Это базовый функционал который регулярно контролируется Smoke-тестами. 

*Санитарное т-е* *(Sanity Testing)* - проводится после незначительных изменений в коде или починке багов. 

Регрессионное т-е(Regression Testing) - нааправлено на обнаружение ошибок в уже проверенных участках программ (или исходных кодах). Помогает убедиться что недавние изменения не сломали работу пр-я. Регрессионные тесты должны проводиться при любых изменения кода, а потому полная автоматизация - лучшая практика в этом типе т-я. Сюда включаются тесты которые покрывают т-е безопасности, критически важных ф-й и те области которые часто меняются в ходе разработки, где высока вероятность ошибок. 

*Повторное тестирование (Retesting) - *производится после устранения дефекта, перепроверяет или подтверждает то, что ранее неудачные тест-кейсы успешно проводятся после устранения дефектов без изменения их самих, на том же окружении, но с различным набором входных данных. 

***Виды функционального т-я:***
*Тестирование графического интерфейса(User interface testing)* - Проверка соответствия интерфейса ПО требованиям дизайна. 

Пользовательский интерфейс (user interface (UI)) - это интерфейс, к-й позволяет юзерам взаимно-ть с ПО, используя при этом визуальные индикаторы и графические значки. 

UI-тесты включают в себя проверку наличия всех требуемых элементов на странице, их размеров и расположения, т-е шрифтов, цветов, изображений. 

**Тестирование удобства пользования (Usability Testing)** - определение удобства использования приложения. Эргономичность интерфейсов, оформление, удобство восприятия, навигации. В этот вид входит Тестирование доступности. 

**Тестирование доступности (Accessibility Testing)** - поверка доступности приложения для людей с ограниченными возможностями. 
Н-р исп-е определенной цветовой гаммы, добавление субтитров на видео или озвучивание всей страницы. 

**Тестирование производительности (Perfomance Testing)** - тестирование скорости работы приложения под определенной нагрузкой. 

**Нагрузочное тестирование (Load Testing)** - оценивает поведение системы при норм условиях и возрастающей нагрузке, его целью является также определение макс нагрузки. Например рассчитываем, что приложением будут пользоваться 500 юзеров, и через спец программы (типа Jmeter) моделируем использование 500 юзеров. 

**Стресс-тестирование (Stress testing)** - для определения устойчивости системы или модуля при пороговых или за пределом раб нагрузки. 

**Объемное тестирование (Volume testing)** - когда те же 500 юзеров отправляют одновременно какой-то объем информации. 

**Тестирование надежности (Reliability Testing)** - длительное тестирование под ожидаемой нагрузкой. 

**Тестирование безопасности (Installation Testing)** - проверка успешной инсталяции, настройки, обновления и удаления. 

**Тестирование совместимости (Compatibility Testing)** - проверка корректной работы приложения в определенном окружении, устройстве, ОС(*кроссплатформенное тестирование*) или браузере(*кроссбраузерное тестиорование*). 

**Тестирование на отказ и восстановление (Recovery Testing)** - проверка насколько хорошо приложение может оправиться от аварий и сбоев оборудования. 

**Тестирование локализации (Localization Testing)** - т-е локализованной версии пр-я: проверка правильности перевода интерфейса, системных сообщений и ошибок, раздела «Помощь/Справка», документации, контроль формата даты и времени. 

**Тестирование интернационализации (Internationalization Testing)** - насколько продукт может адаптироваться для той или иной локали при выходе на другие рынки. Н-р, возможность поддержки вертикального текста Азиатских стран, чтение справа налево в Арабских странах. 

__В целом, можно сказать, что нет системы распределения по видам и типам т-я. Есть «скелет», а остальные виды могут мигрировать.__ 

#### 								Артефакты

Документы, которые должен знать и уметь писать тестировщик уровня «джуниор» это:
 - тест-кейс;
 - чек-лист;
 - баг-репорт;
 - отчет о тестировании.

**Тест-кейс** - документ с описанными четкими действиями для проверки функций продукта. Простыми словами - это проверка получения ожидаемого результата. Н-р «проверить ввод отрицательных чисел в поел «Возраст»». 
Тест-кейсы, проверяющие одну функциональность, могут быть объединены в тест-сьюты (тест-наборы). 

## 								Баг-репорт
**Баг-репорт** - это документ, в котором описана последовательность шагов, приводящая к неверному поведению функционала, а т.ж описан ожидаемый результат. 

__**Атрибуты баг-репорта (обязательные и нет)**:__

ID - номер баг-репорта. В большинстве случаев создается баг-трекинговой системой. 

Заголовок - С помощью одного предложения описывается суть бага. Для написания заголовка используют вопросы «Что?Где?Когда?. Они позволяют написать для всех членов команды заголовок, не слишком длинный, но отражающий суть бага. 

Шаги - обязательный атрибут. Описывается последовательность и минимум необходимых действий. 

Фактический результат - обязательный атрибут. Описывается полученный результат после выполнения описанных шагов. 

Ожидаемый результат - обязательный атрибут. 

Серьезность - обязательный атрибут. Указывается уровень серьезности бага и насколько это критично влияет на общую функц-ть трестируемого продукта. 
Приоритет - необязательный атрибут. Указывается очередность исправления бага. 

Скриншот или видео - обязательный атрибут. Видео или скриншот должны четко демонстрировать баг. Можно сделать выделение бага, сделать короткие поясняющие надписи, если это необходимо. 

Тип бага - необязательный атрибут. Исходя из этой информации, можно составить отчет и провести анализ о слабых местах в продукте, чтобы потом их исправить.
 
Статус - необязательный атрибут. Указывается статус бага в его «жизненном цикле».
 
Требование - необязательный атрибут. Указывается ссылка на требование, в котором прописано ожидаемое поведение. При наличие такого докуамента можно избежать споров (если возникнут) баг или фича. 

Дополнительная информация - необязательный атрибут. Доп инф-ей может быть файл с тестовыми данными, данные для авторизации (тестовый логин и пароль) и т.д. 

Окружение - необязательный атрибут. Если нужно, то можно указать версию браузера, ОС и т.д. 

Автор - необязательный атрибут. Указывается тестировщик, который обнаружил и создал баг-репорт. У разрабов могут возникнуть доп вопросы и так будет понятно к кому надо обратиться. 

Исполнитель - необязательный атрибут. Указывается человек, который продолжит работу над исправлением бага. 

Версия обнаружения - необязательный атрибут. 

Комментарии - необязательный атрибут. В них происходит обсуждение бага после создания баг-репорта. 

Серьёзность и приоритет:
**Блокирующий (Bloker)** - когда из-за описанного бага продукт совсем не работает.  Например на сайте открывается главная страница и зависает, не реагирует на клики и др действия. 

**Критический (Critical) -** когда баг влияет на главный функционал. Н-р для сайта с рецептами таким будет создание и публикация рецепта. 

**Серьезный (Major) -** когда баг создает неудобства, но не влияет на критический функционал. Н-р у созданного рецепта не появляется флажка «Новый». 

**Незначительный (Minor) -** когда баг не влияет на логику приложения. Н-р баги возникающие при верстке, локализации и т.д. Н-р цвет шрифта всех кнопок должен быть темно-синий (согласно макету), а разрабы забыли про одну кнопку и сделали ее с зелёным. 

**Тривиальный (Trivial) -** баги этого уровня не влияют на работу и качества продукта.  Такие баги не исправляют специально, а обычно делают правку в ходе реализации функционала6 который находится рядом. Н-р на нашем сайте в утере отображается прошедший год. 

Серьезность в баг-репорте выставляет тестировщик, а приоритет прожект менеджер. 

#### Жизненный цикл
Жизненный цикл бага - это последовательность этапов, которые проходит баг-репорт с момента его создания до окончательного закрытия. Состоит из этапов:
Новый, Отклонен, Открыт, Отсрочен, Исправлен, Повторно открыт, Закрыт. 

### 										Отчет о тестировании

Отчет составляется по шаблону предоставленному заказчиком. Если же шаблона нет, а отчет нужен, то можно придерживаться следующего списка:
  - Информация о проекте — краткое описание содержания отчета. Например, название проекта, тестируемая версия и т.д.;

 - Команда тестировщиков — список людей, которые задействованы в тестировании. Если был один человек, то можно опустить этот пункт;

 - Описание процесса тестирования — какие использовались техники, методы и инструменты;

 - Краткое описание результатов — что было протестировано (версия, номер сборки); что тормозит процесс тестирования (критичные дефекты, недоработанная функциональность, пробелы в требованиях);

 - Расписание — временные сроки тестирования функционала;

 - Статистика по багам — баги, обнаруженные за отчетный период, степень их важности и срочности.

 - Список новых багов — список багов, впервые обнаруженных в данном отчетном периоде.

 - Список устраненных дефектов — список багов, исправленных разработчиками в отчетном периоде.

 - Рекомендации — выводы по результатам тестирования и рекомендации по повышению его эффективности в будущем. 

 - Приложения — графики, таблицы, диаграммы, демонстрирующие числовые характеристики процесса тестирования.

Ссылка на пример https://limelab.tech/test-report.pdf
